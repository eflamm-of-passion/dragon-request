@startuml

package application.usecase {
    class CreateEndpointUseCase {
        - endpointRepository: EndpointRepository,
        + execute(endpoint: Endpoint): Result<Endpoint>
    }
    class GetEndpointsUseCase {
        - endpointRepository: EndpointRepository,
        + execute(): Result<List<Endpoint>>
    }
    class GetSingleEndpointUseCase {
        - endpointRepository: EndpointRepository,
        + execute(idAsString: String): Result<Endpoint>
    }
    class UpdateEndpointUseCase {
        - endpointRepository: EndpointRepository,
        + execute(endpoint: Endpoint): Result<Endpoint>
    }
    class DeleteEndpointUseCase {
        - endpointRepository: EndpointRepository,
        + execute(idAsString: String): Result<Unit>
    }
}

package domain.model {
    class Endpoint {
       - id: Id
       - protocol: Protocol
       - domain: DomainName
       - port: Port
       - path: Path
       - queryParameters: QueryParameters
    }
}

package domain.repository {
    interface EndpointRepository {
        + getEndpoint(id: Id): Endpoint?
        + createEndpoint(endpoint: Endpoint): Endpoint
        + updateEndpoint(idOfEndpointToUpdate: Id, endpointUpdated: Endpoint): Endpoint
        + deleteEndpoint(id: Id)
    }
}

package domain.logger {
    interface Logger {
        + info(message: String)
        + debug(message: String)
        + warn(message: String)
        + error(message: String)
    }
}

package 1-infrastructure {
    package api {
        class EndpointsController {
            + start(),
            - getEndpoints(context: RoutingContext),
'            - handleSuccessGetEndpoints(context: RoutingContext, getEndpointResult: Result<List<Endpoint>>),
'            - handleFailureGetEndpoints(context: RoutingContext, e: EndpointException),
            - getEndpoint(context: RoutingContext),
'            - handleSuccessGetEndpoint(context: RoutingContext, id: String, getEndpointResult: Result<Endpoint>),
            - createEndpoint(context: RoutingContext),
'            - handleSuccessCreateEndpoint(context: RoutingContext, createEndpointResult: Result<Endpoint>),
'            - handleFailureCreateEndpoint(context: RoutingContext, e: EndpointException),
            - updateEndpoint(context: RoutingContext),
'            - handleSuccessUpdateEndpoint(context: RoutingContext, id: String, updateEndpointResult: Result<Endpoint>),
'            - handleFailureUpdateEndpoint(context: RoutingContext, id: String, e: EndpointException),
            - deleteEndpoint(context: RoutingContext),
'            - handleSuccessDeleteEndpoint(context: RoutingContext, id: String),
'            - handleFailureGetOrDeleteEndpoint(context: RoutingContext, id: String, e: EndpointException)
        }
        class EndpointMapper {
            + dtoToBusiness(endpointCreateInput: EndpointCreateInput): Endpoint,
            + dtoToBusiness(endpointUpdateInput: EndpointUpdateInput): Endpoint,
            + businessToDto(endpoints: List<Endpoint>): List<EndpointOutput>,
            + businessToDto(endpoint: Endpoint): EndpointOutput
        }
        class EndpointsValidator {
            + validate(input: EndpointCreateInput): String,
            + validate(id: String, input: EndpointUpdateInput): String,
            + doesNotContainErrors(errorMessage: String): Boolean
        }
        class EndpointCreateInput {
            + url: String
        }
        class EndpointUpdateInput {
            + id: String,
            + url: String
        }
        class EndpointOutput {
            + id: String,
            + url: String
        }
    }
}

package 2-infrastructure {
    package cdi {
        class main {}
        class ApplicationDepencyInjector {
            + startApplication(startArguments: List<String>),
'            - getProfile(startupArguments: List<String>): String,
'            - getPropertyFileName(profile: String): String ,
'            - instantiateController(propertyProvider: PropertyProvider): EndpointsController,
'            - instantiateGetEndpointsUseCase(propertyProvider: PropertyProvider): GetEndpointsUseCase,
'            - instantiateGetSingleEndpointUseCase(propertyProvider: PropertyProvider): GetSingleEndpointUseCase,
'            - instantiateCreateEndpointUseCase(propertyProvider: PropertyProvider): CreateEndpointUseCase,
'            - instantiateUpdateEndpointUseCase(propertyProvider: PropertyProvider): UpdateEndpointUseCase,
'            - instantiateDeleteEndpointUseCase(propertyProvider: PropertyProvider): DeleteEndpointUseCase,
'            - instantiateRepositoryImpl(propertyProvider: PropertyProvider): EndpointRepository,
'            - instantiatePropertyProviderImpl(propertiesFileName: String): PropertyProvider,
'            - instantiateLogger(className: String): Logger,
        }
        package properties {
            interface PropertyProvider {
                + get(key: String): String
            }
            class ApplicationPropertiesFileProvider implements PropertyProvider {
                + get(key: String): String
            }
        }
    }
}

package 3-infrastructure {
    package persistence {
        class MockEndpointRepository implements domain.repository.EndpointRepository {
            + getEndpoint(id: Id): Endpoint?
            + createEndpoint(endpoint: Endpoint): Endpoint
            + updateEndpoint(idOfEndpointToUpdate: Id, endpointUpdated: Endpoint): Endpoint
            + deleteEndpoint(id: Id)
        }
        class SqliteRepository implements domain.repository.EndpointRepository {
            + connect()
            + disconnect()
            + getEndpoint(id: Id): Endpoint?
            + createEndpoint(endpoint: Endpoint): Endpoint
            + updateEndpoint(idOfEndpointToUpdate: Id, endpointUpdated: Endpoint): Endpoint
            + deleteEndpoint(id: Id)
        }
    }
}

package logger-slf4j {
    class SLF4JLogger implements domain.logger.Logger {
        + info(message: String)
        + debug(message: String)
        + warn(message: String)
        + error(message: String)
    }
}

'application
CreateEndpointUseCase -right-> domain.repository.EndpointRepository
GetEndpointsUseCase -right-> domain.repository.EndpointRepository
GetSingleEndpointUseCase -right-> domain.repository.EndpointRepository
UpdateEndpointUseCase -right-> domain.repository.EndpointRepository
DeleteEndpointUseCase -right-> domain.repository.EndpointRepository
CreateEndpointUseCase -up-> Endpoint
GetEndpointsUseCase -up-> Endpoint
GetSingleEndpointUseCase -up-> Endpoint
UpdateEndpointUseCase -up-> Endpoint
DeleteEndpointUseCase -up-> Endpoint

'infrastructure
EndpointsController -left-> EndpointsValidator
EndpointsController -right-> EndpointOutput
EndpointsController -down-> EndpointCreateInput
EndpointsController -down-> EndpointUpdateInput
EndpointsController -up-> CreateEndpointUseCase
EndpointsController -up-> GetEndpointsUseCase
EndpointsController -up-> GetSingleEndpointUseCase
EndpointsController -up-> UpdateEndpointUseCase
EndpointsController -up-> DeleteEndpointUseCase

main -up-> ApplicationDepencyInjector
ApplicationDepencyInjector -up-> EndpointsController
ApplicationDepencyInjector -up-> PropertyProvider

@enduml
